[project]
name = "floor-heights"
dynamic = ["version"]

description = "Estimate building first-floor heights from panoramic imagery, LiDAR and ML."
keywords = ["lidar", "geospatial", "machine-learning"]
requires-python = ">=3.12"

authors = [
  { name = "Benjamin Tebbutt", email = "btebbutt@frontiersi.com.au" },
  { name = "Lavender Liu", email = "lliu@frontiersi.com.au" }
]

dependencies = [
  "boto3>=1.38,<2",
  "click>=8.2.1",
  "diskcache>=5.6,<6",
  "duckdb>=1.1,<2",
  "fiona>=1.10.1",
  "folium>=0.19,<1",
  "geopandas>=1.0,<2",
  "loguru>=0.7,<1",
  "matplotlib>=3.10,<4",
  "numpy>=2.2.6",
  "pandas>=2.2,<3",
  "pillow>=11.2.1",
  "polars>=1.29,<2",
  "psycopg2-binary>=2.9.10",
  "pyarrow>=10.0.1,<18",
  "pyproj>=3.7.1",
  "python-dotenv>=1.1,<2",
  "pyyaml>=6,<7",
  "rich>=12.4.4,<14",
  "ibis-framework[duckdb]>=9.5.0,<10",
  "scikit-learn>=1.6,<1.7",
  "scipy>=1.15,<2",
  "shapely>=2.1.1",
  "tabulate>=0.9,<1",
  "torch>=2.7.1",
  "tqdm>=4.67,<5",
  "typer>=0.15,<1",
  "pydantic>=2.11.7",
  "ultralytics>=8.3.157",
  "transformers>=4.52.4",
  "scikit-image>=0.25.2",
  "azure-storage-blob>=12.25.1",
  "laspy>=2.5.0",
  "fastapi>=0.104.0",
  "uvicorn>=0.24.0",
]

[project.optional-dependencies]
lidar = ["pdal"]

ml = [
  "torch>=2.0",
  "torchvision>=0.15",
  "ultralytics>=8.0",
  "opencv-python>=4.8",
  "clip @ git+https://github.com/openai/CLIP.git",
]

lint = ["ruff>=0.4", "mypy>=1.15", "pre-commit>=4.2"]
test = ["pytest>=8.3", "pytest-cov>=6.1", "hypothesis>=6.131"]
typing = [
  "pandas-stubs>=2.2",
  "types-boto3>=1.38",
  "types-tabulate>=0.9",
  "types-tqdm>=4.67",
  "types-pyyaml>=6.0",
  "types-pytz>=2025"
]

dev = [
  "floor-heights[lint,test,typing]",
  "ipykernel>=6.29"
]

[project.scripts]
fh = "floor_heights.cli:app"

[build-system]
requires = [
  "setuptools>=69",
  "setuptools_scm[toml]>=8.0"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "" = "src" }
package-data = { "floor_heights" = ["py.typed"] }
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
fallback_version = "0.1.0"

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.ruff]
target-version = "py312"
line-length = 120
exclude = [
  ".venv", ".git", "__pycache__", ".ruff_cache",
  "build", "dist", "migrations", "data", "*.egg-info"
]
include = ["*.py", "*.pyi", "pyproject.toml"]

[tool.ruff.lint]
select = [
  "E", "W", "F", "I", "N", "UP", "B",
  "C4", "SIM", "PTH", "RUF", "PERF"
]
ignore = ["E501", "B008"]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F401", "F811"]
"__init__.py" = ["F401", "E402"]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
docstring-code-format = true
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.12"
strict = true
namespace_packages = true
plugins = ["sqlalchemy.ext.mypy.plugin"]
explicit_package_bases = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "regression.*"
ignore_errors = true

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "scm"
tag_format = "v$version"
